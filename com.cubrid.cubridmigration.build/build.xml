<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project default="all" name="Cubrid Migration Tookkit">
	<property file="build.properties" />
	<property file="${basedir}/../com.cubrid.cubridmigration.ui/version.properties" />
	<!-- common project property -->
	<property name="product.name" value="CUBIRD Migration Toolkit" />
	<property name="product.version" value="${buildVersionId}" />

	<!-- directorys -->
	<property name="parent.home" value=".." />
	<property name="classes.home" value="${basedir}/classes" />
	<property name="test.home" value="${basedir}/test" />
	<property name="reports.home" value="${basedir}/reports" />
	<!-- libs -->
	<property name="rcp.lib.common" value="${basedir}/lib/common" />
	<!-- checkstyle -->
	<property name="checkstyle.home" value="${test.home}/checkstyle" />
	<property name="checkstyle.lib" value="${checkstyle.home}/lib" />
	<property name="reports.checkstyle.home" value="${reports.home}/checkstyle" />
	<!-- cobertura -->
	<property name="cobertura.home" value="${test.home}/cobertura" />
	<property name="cobertura.lib" value="${cobertura.home}/lib" />
	<property name="reports.cobertura.home" value="${reports.home}/cobertura" />
	<property name="reports.junit.xml.dir" value="${reports.cobertura.home}/junit-xml" />
	<property name="reports.junit.html.dir" value="${reports.cobertura.home}/junit-html" />
	<property name="reports.cobertura.xml.dir" value="${reports.cobertura.home}/cobertura-xml" />
	<property name="reports.cobertura.html.dir" value="${reports.cobertura.home}/cobertura-html" />
	<property name="cobertura.datafile" value="${reports.cobertura.home}/cobertura.ser" />
	<property name="cobertura.instrumented.dir" value="${reports.cobertura.home}/instrumented" />
	<property name="cobertura.core.classes.dir" value="${cobertura.instrumented.dir}/classes/core" />
	<property name="cobertura.test.core.classes.dir" value="${cobertura.instrumented.dir}/classes/test-core" />
	<property name="cobertura.core.instrumented-classes.dir" value="${cobertura.instrumented.dir}/instrumented-classes/core" />

	<property name="cobertura.ui.classes.dir" value="${cobertura.instrumented.dir}/classes/ui" />
	<property name="cobertura.test.ui.classes.dir" value="${cobertura.instrumented.dir}/classes/test-ui" />
	<property name="cobertura.ui.instrumented-classes.dir" value="${cobertura.instrumented.dir}/instrumented-classes/ui" />

	<!-- core project property  -->
	<property name="core.project" value="${parent.home}/com.cubrid.cubridmigration.core" />
	<property name="core.src.home" value="${core.project}/src" />
	<property name="core.lib.home" value="${core.project}/lib" />
	<property name="jdbc.dir" value="${core.project}/jdbc" />
	<property name="templates.dir" value="${core.project}/templates" />
	<property name="core.classes.home" value="${classes.home}/core" />
	<!-- p2 update project property -->
	<property name="update.project" value="${parent.home}/com.cubrid.common.update" />
	<property name="update.src.home" value="${update.project}/src" />
	<property name="update.lib.home" value="${update.project}/lib" />
	<property name="update.classes.home" value="${classes.home}/update" />
	<!-- ui project property -->
	<property name="ui.project" value="${parent.home}/com.cubrid.cubridmigration.ui" />
	<property name="ui.src.home" value="${ui.project}/src" />
	<property name="ui.lib.home" value="${ui.project}/lib" />
	<property name="ui.classes.home" value="${classes.home}/ui" />
	<!-- common configuration project property -->
	<property name="common.configuration.project.home" value="${parent.home}/com.cubrid.common.configuration" />
	<property name="common.configuration.src.home" value="${common.configuration.project.home}/src" />
	<property name="common.configuration.lib.home" value="${common.configuration.project.home}/lib" />
	<property name="common.configuration.class.home" value="${classes.home}/configuration" />
	<!-- app project property -->
	<property name="app.project" value="${parent.home}/com.cubrid.cubridmigration.app" />
	<property name="app.src.home" value="${app.project}/src" />
	<property name="app.classes.home" value="${classes.home}/app" />
	<!-- core test project property -->
	<property name="test.core.project" value="${parent.home}/com.cubrid.cubridmigration.core.testfragment" />
	<property name="test.core.src.home" value="${test.core.project}/src" />
	<property name="test.core.lib.home" value="${test.core.project}/lib" />
	<!-- ui test project property -->
	<property name="test.ui.project" value="${parent.home}/com.cubrid.cubridmigration.ui.testfragment" />
	<property name="test.ui.src.home" value="${test.ui.project}/src" />
	<property name="test.ui.jdbc.home" value="${test.ui.project}/jdbc" />
	<!-- If new project added, please add the project's directory information here -->

	<!-- check style classpath -->
	<path id="checkstyle.classpath">
		<fileset dir="${checkstyle.lib}">
			<include name="*.jar" />
		</fileset>
	</path>
	<!-- cobertura classpath -->
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- for compile pathes -->
	<path id="common.configuration.compile.classpath">
		<fileset dir="${common.configuration.lib.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${rcp.lib.common}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="update.compile.classpath">
		<fileset dir="${update.lib.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${rcp.lib.common}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!--
	   	the classpath that core project compile need
	  	-->
	<path id="core.compile.classpath">
		<pathelement location="${common.configuration.class.home}" />
		<fileset dir="${core.lib.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${rcp.lib.common}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!--
	   	the classpath that core test project compile need
	  	-->
	<path id="core.test.compile.classpath">
		<fileset dir="${test.core.lib.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${rcp.lib.common}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${core.lib.home}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${core.classes.home}" />
	</path>

	<!-- the classpath that ui project compile need -->
	<path id="ui.compile.classpath">
		<fileset dir="${rcp.lib.common}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${core.lib.home}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${ui.lib.home}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${common.configuration.class.home}" />
		<pathelement location="${update.classes.home}" />
		<pathelement location="${core.classes.home}" />
	</path>

	<!-- the classpath that ui project compile need -->
	<path id="ui.test.compile.classpath">
		<pathelement location="${ui.classes.home}" />
		<fileset dir="${rcp.lib.common}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${core.lib.home}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${common.configuration.class.home}" />
		<pathelement location="${update.classes.home}" />
		<pathelement location="${core.classes.home}" />
		<pathelement location="${cobertura.test.core.classes.dir}" />
		<pathelement location="${ui.classes.home}" />
	</path>

	<!-- the classpath that app project compile need -->
	<path id="app.compile.classpath">
		<pathelement location="${app.classes.home}" />
		<fileset dir="${rcp.lib.common}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${core.classes.home}" />
		<pathelement location="${ui.classes.home}" />
		<pathelement location="${update.classes.home}" />
	</path>

	<!-- Clean the last compiled files -->
	<target name="clean">
		<delete dir="${classes.home}" />
		<delete dir="${reports.home}" />
		<delete>
			<fileset dir="${basedir}" includes="junit*" />
		</delete>
	</target>

	<!-- Prepare the directories -->
	<target name="prepare">
		<mkdir dir="${classes.home}" />
		<mkdir dir="${common.configuration.class.home}" />
		<mkdir dir="${core.classes.home}" />
		<mkdir dir="${ui.classes.home}" />
		<mkdir dir="${update.classes.home}" />
		<mkdir dir="${app.classes.home}" />
		<mkdir dir="${app.classes.home}/icons" />

		<mkdir dir="${reports.home}" />
		<mkdir dir="${reports.checkstyle.home}" />
		<mkdir dir="${reports.cobertura.home}" />
		<mkdir dir="${cobertura.instrumented.dir}" />
		<mkdir dir="${reports.junit.xml.dir}" />
		<mkdir dir="${reports.junit.html.dir}" />
		<mkdir dir="${reports.cobertura.xml.dir}" />
		<mkdir dir="${reports.cobertura.html.dir}" />
		<mkdir dir="${cobertura.core.classes.dir}" />
		<mkdir dir="${cobertura.test.core.classes.dir}" />
		<mkdir dir="${cobertura.core.instrumented-classes.dir}" />
		<mkdir dir="${cobertura.ui.classes.dir}" />
		<mkdir dir="${cobertura.test.ui.classes.dir}" />
		<mkdir dir="${cobertura.ui.instrumented-classes.dir}" />

	</target>

	<!-- compile cubrid migration related project -->
	<target name="compile">
		<javac srcdir="${common.configuration.src.home}" destdir="${common.configuration.class.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="common.configuration.compile.classpath" />
		</javac>
		<javac srcdir="${update.src.home}" destdir="${update.classes.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="update.compile.classpath" />
		</javac>
		<javac srcdir="${core.src.home}" destdir="${core.classes.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="core.compile.classpath" />
		</javac>
		<javac srcdir="${ui.src.home}" destdir="${ui.classes.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="ui.compile.classpath" />
		</javac>
		<javac srcdir="${app.src.home}" destdir="${app.classes.home}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="app.compile.classpath" />
		</javac>
	</target>

	<!-- check style -->
	<target name="checkstyle">
		<taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
			<classpath refid="checkstyle.classpath" />
		</taskdef>
		<checkstyle config="${checkstyle.home}/ruledocs/checkstyle-0.6.xml" maxErrors="100000" failureProperty="${reports.checkstyle.home}/checkstyle.failure">
			<fileset dir="${core.src.home}" includes="com/cubrid/cubridmigration/**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${ui.src.home}" includes="com/cubrid/cubridmigration/**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<fileset dir="${app.src.home}" includes="com/cubrid/cubridmigration/**/*.java" excludesfile="${checkstyle.home}/checkstyle-exclude.properties" />
			<formatter type="xml" toFile="${reports.checkstyle.home}/checkstyle_result.xml" />
			<property key="checkstyle.cache.file" file="${reports.checkstyle.home}/cachefile" />
			<property key="checkstyle.header.file" file="${checkstyle.home}/ruledocs/java.header" />
			<property key="checkstyle.suppressions.file" file="${checkstyle.home}/ruledocs/checkstyle-suppressions.xml" />
		</checkstyle>
		<xslt in="${reports.checkstyle.home}/checkstyle_result.xml" out="${reports.checkstyle.home}/checkstyle_report.html" style="${checkstyle.home}/ruledocs/checkstyle-noframes-sorted.xsl" />
	</target>

	<!-- cobertura -->
	<target name="cobertura-compile">
		<!-- compile core test -->
		<javac srcdir="${core.src.home}" destdir="${cobertura.core.classes.dir}" debug="yes" encoding="UTF-8">
			<classpath refid="core.compile.classpath" />
		</javac>
		<javac srcdir="${test.core.src.home}" destdir="${cobertura.test.core.classes.dir}" debug="yes" encoding="UTF-8">
			<classpath refid="core.test.compile.classpath" />
			<classpath refid="cobertura.classpath" />
		</javac>
		<copy todir="${cobertura.core.classes.dir}">
			<fileset dir="${core.src.home}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
		<copy todir="${cobertura.test.core.classes.dir}">
			<fileset dir="${test.core.src.home}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<!-- compile ui test -->
		<javac srcdir="${ui.src.home}" destdir="${cobertura.ui.classes.dir}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="ui.compile.classpath" />
		</javac>
		<copy todir="${cobertura.ui.classes.dir}">
			<fileset dir="${ui.src.home}">
				<include name="**/*.properties" />
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<javac srcdir="${test.ui.src.home}" destdir="${cobertura.test.ui.classes.dir}" debug="yes" encoding="${javac.encoding}">
			<classpath refid="ui.test.compile.classpath" />
			<classpath refid="cobertura.classpath" />
		</javac>
		<copy todir="${cobertura.test.ui.classes.dir}">
			<fileset dir="${test.ui.src.home}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="cobertura" depends="cobertura-compile">
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		<delete file="${cobertura.datafile}" />
		<cobertura-instrument todir="${cobertura.core.instrumented-classes.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${cobertura.core.classes.dir}">
				<include name="com/cubrid/cubridmigration/**/*.class" />
				<include name="com/cubrid/cubridmigration/**/*.xml" />
				<include name="com/cubrid/cubridmigration/**/*.properties" />
				<include name="com/cubrid/cubridmigration/**/*.txt" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>

		<cobertura-instrument todir="${cobertura.ui.instrumented-classes.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${cobertura.ui.classes.dir}">
				<include name="com/cubrid/**/*.class" />
				<include name="com/cubrid/**/*.xml" />
				<include name="com/cubrid/**/*.properties" />
				<include name="com/cubrid/**/*.txt" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>

		<junit fork="yes" dir="${test.core.src.home}/.." failureProperty="${reports.cobertura.home}/junit.failed">
			<!--
				Specify the name of the coverage data file to use.
				The value specified below is the default.
				-->
			<jvmarg value="-XX:-UseSplitVerifier" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />

			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
				-->
			<classpath location="${common.configuration.class.home}" />
			<classpath location="${cobertura.core.instrumented-classes.dir}" />
			<classpath location="${cobertura.core.classes.dir}" />
			<classpath refid="core.test.compile.classpath" />
			<classpath location="${cobertura.test.core.classes.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<formatter type="brief" usefile="false" />
			<test name="${testcase}" todir="${reports.junit.xml.dir}" if="testcase" />
			<batchtest todir="${reports.junit.xml.dir}" unless="testcase">
				<fileset dir="${test.core.src.home}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junit fork="yes" dir="${test.ui.src.home}/.." failureProperty="${reports.cobertura.home}/junit.failed">
			<!--
						Specify the name of the coverage data file to use.
						The value specified below is the default.
						-->
			<jvmarg value="-XX:-UseSplitVerifier" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.datafile}" />

			<!--
						Note the classpath order: instrumented classes are before the
						original (uninstrumented) classes.  This is important.
						-->
			<classpath location="${common.configuration.class.home}" />
			<classpath location="${cobertura.core.instrumented-classes.dir}" />
			<classpath location="${cobertura.core.classes.dir}" />
			<classpath refid="core.test.compile.classpath" />
			<classpath location="${cobertura.test.core.classes.dir}" />

			<classpath location="${update.classes.home}" />
			<classpath location="${cobertura.ui.instrumented-classes.dir}" />
			<classpath location="${cobertura.ui.classes.dir}" />
			<classpath refid="ui.test.compile.classpath" />
			<classpath location="${cobertura.test.ui.classes.dir}" />
			<!--
						The instrumented classes reference classes used by the
						Cobertura runtime, so Cobertura and its dependencies
						must be on your classpath.
					-->
			<classpath refid="cobertura.classpath" />

			<formatter type="xml" />
			<test name="${testcase}" todir="${reports.junit.xml.dir}" if="testcase" />
			<batchtest todir="${reports.junit.xml.dir}" unless="testcase">
				<fileset dir="${test.ui.src.home}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>

		<junitreport todir="${reports.junit.xml.dir}">
			<fileset dir="${reports.junit.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.junit.html.dir}" />
		</junitreport>

		<cobertura-report format="xml" destdir="${reports.cobertura.xml.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${test.core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.ui.src.home}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

		<cobertura-report format="html" destdir="${reports.cobertura.html.dir}" datafile="${cobertura.datafile}">
			<fileset dir="${test.core.src.home}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.ui.src.home}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>
	<target depends="clean,prepare,compile" name="all" />
	<target depends="checkstyle,cobertura" name="all_withtest" />
</project>
