###############################################################################
# Copyright (C) 2009 Search Solution Corporation. All rights reserved by Search
# Solution
# 
###############################################################################
topLevelElementType=feature
topLevelElementId=com.cubrid.cubridmigration.plugin.feature

#eclipse.home=D:/eclipse-rcp-helios-win32/eclipse
#eclipse.pdebuild.scripts=${eclipse.home}/plugins/org.eclipse.pde.build_3.6.0.v20100603/scripts
# target platform directory including the dependent plugins and features directory
# - target_platform
#    - plugins
#         - org.eclipse.core.runtime
#         - org.eclipse.ui
#         - ...
#    - features
#        - org.eclipse.equinox.launcher
#        - ...
baseLocation=${eclipse.home}

# the directory which have build.properties file
# - build_config
#   - build.properties
#builder=feature_build_conf
builder=${basedir}/plugin_build_conf

# the builder output directory. create the two subdirectories called plugins and features,
# and copy the plug-ins and features that you want to build into theses tow folders.
#- build_directory
#    - plugins
#        - plugin_to_build_a
#        - plugin_to_build_b
#        - ...
#    - features
#        - feature_to_build
#        - ...
#buildDirectory=feature_build
buildDirectory=${basedir}/plugin_build

#pluginPath=${eclipse.home}/dropins/delta/eclipse
#${basedir}/lib/delta,
# Use the building result of the buildProduct.xml as building class path, 
# so this building script should be runned after the buildProduct.xml script. 
pluginPath=${basedir}/product_build/repository

runPackager=true

p2.gathering=true
p2.metadata.repo=file:${buildDirectory}/repository
p2.artifact.repo=file:${buildDirectory}/repository
p2.metadata.repo.name=cubridmigration
p2.artifact.repo.name=cubridmigration
p2.category.site=file:${basedir}/../com.cubrid.cubridmigration.plugin.update.site/site.xml
p2.compress=true
#Set the name of the archive that will result from the product build.
#archiveNamePrefix=

# The prefix that will be used in the generated archive zip.
archivePrefix=cubridmigration

# The location underwhich all of the build output will be collected.
collectingFolder=${archivePrefix}

# The list of {os, ws, arch} configurations to build.  This 
# value is a '&' separated list of ',' separate triples.  For example, 
#     configs=win32,win32,x86 & linux,motif,x86
# By default the value is *,*,*
configs=*,*,*
#configs = win32, win32, x86 & \
#	win32,win32,x86_64 & \
#    linux, gtk, x86 & \
#    linux, gtk, x86_64 & \
#    macosx, carbon, x86 &
#configs=win32, win32, x86 & \
#	win32,win32,x86_64 & \
#	win32,win32,wpf & \
#	linux, gtk, ppc & \
#	linux, gtk, x86 & \
#	linux, gtk, x86_64 & \
#	linux, motif, x86 & \
#	solaris, motif, sparc & \
#	solaris, gtk, sparc & \
#	aix, motif, ppc & \
#	hpux, motif, ia64_32 & \
#	macosx, carbon, ppc & \
#	macosx, carbon, x86 & \
#	macosx, cocoa, ppc & \
#	macosx, cocoa, x86 & \
#	macosx, cocoa, x86_64

#Allow cycles involving at most one bundle that needs to be compiled with the rest being binary bundles.
allowBinaryCycles = true

# Type of build.  Used in naming the build output.  Typically this value is
# one of I - Integration, N - Nightly, M - Maintenance, S - Stable, R - Release...
buildType=I

# ID of the build.  Used in naming the build output.
buildId=cubridmigration

# Label for the build.  Used in naming the build output
buildLabel=${buildType}.${buildId}

# Timestamp for the build.  Used in naming the build output
timestamp=007

#Set to true if you want to sign jars
#signJars=false
#sign.alias=CUBRID
#sign.keystore=./keystore/cubridkeystore
#sign.storepass=cubrid123
#sign.keypass=cubrid!@#

#this property indicates whether the resolution should be done in development mode (i.e. ignore multiple bundles with singletons)
resolution.devMode=false

skipBase=true
skipMaps=true
skipFetch=true

groupConfigurations=false
outputUpdateJars=true

############# JAVA COMPILER OPTIONS ##############
# For this example:
# We specify the JRE locations for CDC-1.1/Foundation-1.1 and J2SE-1.5
# because these are the required execution environments defined for the 
# bundles in the example. 

# The location of the Java jars to compile against.  Typically the rt.jar for your JDK/JRE
#bootclasspath=${java.home}/lib/rt.jar

# If using an IBM VM, use
#bootclasspath=${java.home}/lib/core.jar;${java.home}/lib/vm.jar

# specific JRE locations to compile against. These values are used to compile bundles specifying a 
# Bundle-RequiredExecutionEnvironment. Uncomment and set values for environments that you support
#CDC-1.0/Foundation-1.0= /path/to/rt.jar
CDC-1.1/Foundation-1.1=${java.home}/lib/rt.jar
#OSGi/Minimum-1.0=
#OSGi/Minimum-1.1=
#JRE-1.1=
#J2SE-1.2=
#J2SE-1.3=
#J2SE-1.4=
#J2SE-1.5=${java.home}/lib/rt.jar
JavaSE-1.6=${java.home}/lib/rt.jar
#PersonalJava-1.1=
#PersonalJava-1.2=
#CDC-1.0/PersonalBasis-1.0=
#CDC-1.0/PersonalJava-1.0=
#CDC-1.1/PersonalBasis-1.1=
#CDC-1.1/PersonalJava-1.1=

# Specify the output format of the compiler log when eclipse jdt is used
logExtension=.log

# Whether or not to include debug info in the output jars
javacDebugInfo=false 

# Whether or not to fail the build if there are compiler errors
javacFailOnError=true

# Enable or disable verbose mode of the compiler
javacVerbose=true

# Extra arguments for the compiler. These are specific to the java compiler being used.
#compilerArg=

# Default value for the version of the source code. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacSource in build.properties
javacSource=1.6

# Default value for the version of the byte code targeted. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacTarget in build.properties.
javacTarget=1.6


